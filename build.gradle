import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'signing'
    id 'eclipse'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'net.nemerosa.versioning' version '2.15.0'
}

defaultTasks 'build'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

repositories {
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    useJUnitPlatform()
    testLogging {
        events 'skipped', 'failed'
    }
}

signing {
    required { project.hasProperty('signing.password') && !project.version.endsWith('-SNAPSHOT') }
    sign configurations.archives
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Print service lookup simulating a printer',
                   'Implementation-Version': project.version,
                   'Build-Date': buildDate,
                   'Build-Time': buildTime,
                   'Build-Revision': versioning.info.commit,
                   'Automatic-Module-Name': "net.reini.dummy-printer"
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Dummy Print service'
                description = 'Print service lookup simulating a printer'
                url = 'https://github.com/reinhapa/dummy-printer'
                scm {
                    connection = 'scm:git://github.com/reinhapa/dummy-printer.git'
                    developerConnection = 'scm:git://github.com/reinhapa/dummy-printer.git'
                    url = 'https://github.com/reinhapa/dummy-printer'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'reinhapa'
                        name = 'Patrick Reinhart'
                        email = 'patrick@reini.net'
                    }
                }
            }
        }
    }
    repositories {
        if (!ossrhUsername.isEmpty() && !ossrhPassword.isEmpty()) {
            maven {
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}
